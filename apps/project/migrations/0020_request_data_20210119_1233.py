# Generated by Django 3.0.8 on 2021-01-19 03:33

from django.db import migrations, router
from dotenv import load_dotenv
import os
import sys
load_dotenv()
from django.utils import timezone
from ..models import *
sys.path.append(
    os.path.dirname(os.path.abspath(
        os.path.dirname(os.path.abspath(
            os.path.dirname(os.path.abspath(
                __file__
            ))
        ))
    ))
)
from api.project.serializers import *

class CustomRunPython(migrations.RunPython):
    def __init__(self, *args, **kwargs):
        self.context = kwargs.pop('context', {})
        super().__init__(*args, **kwargs)

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        from_state.clear_delayed_apps_cache()
        if router.allow_migrate(schema_editor.connection.alias, app_label, **self.hints):
            self.code(from_state.apps, schema_editor, **self.context)


class Migration(migrations.Migration):
    def backup (apps, schema_editor):
        DATABASE_NAME = os.getenv('DB_NAME')
        DATABSE_USER = os.getenv('DB_USER')
        DATABSE_PASSWORD = os.getenv('DB_PASSWORD')
        DATABASE_HOST = os.getenv('DB_HOST')
        DATABSE_PORT = os.getenv('DB_PORT')
        os.system("PGPASSWORD=" + DATABSE_PASSWORD + " pg_dump -Fc -h " + DATABASE_HOST + " -U " + DATABSE_USER + " -d " + DATABASE_NAME + " -f ./apps/project/migrations/0020_request_data_20210119_1233.tar -v")


    dependencies = [
        ('project', '0019_requestfile_create_20210119_1232'),
    ]
    
    def getSQl(apps, schema_editor, **context):
        sqlCache = []
        requestCache = Request.objects.all()
        
        for request in requestCache:
            # requestData = RequestSerializer(request).data
            # requestId = requestData['id']
            # requestFile = requestData['file']
            requestId = request.id
            requestFile = request.file
            sqlCache.append(
                """ 
                    insert into "project_requestfile"
                    ("file", "request_id")
                    values(
                        '{requestFile}',
                        '{requestId}'
                    );
                """.format(requestFile = requestFile, requestId = requestId)
            )
        context['sqlCache'] = sqlCache
    
    sqlCache = []
    operations = [
        migrations.RunPython(backup, reverse_code = migrations.RunPython.noop),
        CustomRunPython(getSQl, context = {'sqlCache': sqlCache}, reverse_code = migrations.RunPython.noop),
        migrations.RunSQL(
            sql = sqlCache,
            reverse_sql = ['select * from project_requestfile']
        )
    ]
